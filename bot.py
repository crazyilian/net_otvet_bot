import telethon
import random
import logging
import os
import json
import asyncio


logging.basicConfig(format='[%(levelname) 5s/%(asctime)s] %(name)s: %(message)s', level=logging.WARNING)

bot = telethon.TelegramClient('bot', int(os.environ['API_ID']), os.environ['API_HASH']).start(bot_token=os.environ['BOT_TOKEN'])
BOTNAME = "@net_otvet_bot"
blocked_chats = dict()

with open('words.json', 'r', encoding='utf-8') as f:
    words = json.load(f)

da = {}
net = {}
for word in words:
    if word.endswith('–¥–∞'):
        da[word] = words[word]
    else:
        net[word] = words[word]


async def unblock_chat(chatid, until):
    await asyncio.sleep(max(0, until - time.time()))


def block_chat(chatid, timeout):
    until = time.time() + timeout
    blocked_chats[chatid] = until
    asyncio.get_running_loop().create_task(unblock_chat(chatid, until))


def choose(words):
    base = random.choice(list(words.keys()))
    prefix = random.choice(words[base])
    return (prefix + ' ' + base).strip().capitilize()


@bot.on(telethon.events.NewMessage(pattern=r'(?i)^(|.*\W)([n–Ω]+[e–µ]+[t—Ç]+)\W*$', incoming=True, func=lambda e: e.chat_id not in blocked_chats))
async def handle_net(event):
    word = choose(net)
    await event.reply(word)
    logging.info(f'{event.chat_id}   \t–ù–µ—Ç - {word}')
    block_chat(event.chat_id, 3 * 60)


@bot.on(telethon.events.NewMessage(pattern=r'(?i)^(|.*\W)([d–¥]+[a–∞]+)\W*$', incoming=True, func=lambda e: e.chat_id not in blocked_chats))
async def handle_da(event):
    word = choose(da)
    await event.reply(word)
    logging.info(f'{event.chat_id}   \t–î–∞ - {word}')
    block_chat(event.chat_id, 3 * 60)



@bot.on(telethon.events.NewMessage(pattern=fr'(?i)^/help({BOTNAME}|)(\s|$)', incoming=True))
async def help(event):
    await event.respond('''
–ü—Ä–∏–≤–µ—Ç! üñê
–°–º—ã—Å–ª –±–æ—Ç–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–µ–µ—Å—è –Ω–∞:
‚ñ™Ô∏è –î–∞
‚ñ™Ô∏è –ù–µ—Ç
–î–æ–±–∞–≤—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –æ—Å—Ç—Ä–æ—É–º–Ω—ã–º –æ–±—â–µ–Ω–∏–µ–º! üëå
(–Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π).

–¢–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–æ–≤: 3 –º–∏–Ω—É—Ç—ã.
    '''.strip())

@bot.on(telethon.events.NewMessage(pattern=fr'(?i)^/start({BOTNAME}|)(\s|$)', incoming=True))
async def start(event):
    await help(event)


bot.run_until_disconnected()
